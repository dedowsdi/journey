set family, required sorted. 7
    set_difference                  A - B
    set_intersection                A ^ B
    set_union                       A V B
    set_symmetry_difference         (A - B) V (B - A)
    include                         if A include B
    merge                           c = A + B
    inplace_merge                   just like merge in merge sort

    you can use two different sorted types if you want. set_difference output
    from collection1, others output from both collections.
    The comparator use unspecified order, you might need doulbe functor trick
    to do this(most time, for set_difference).

search: 14
    unsorted search: 10
        find[_if[_not]]
        count[_if[_not]]
        adjacent_find                first two consecutive identical item
        search                       find first of any item in a group
        find_end                     find last of any item in a group
        search_n                     first n censecutive identical items

    sorted search: 4
        binary_search                   only return true or false
        lower bound                     first value no less than, the compartor
                                        use fixed order compare(lhs element, rhs
                                        value)
        upper bound                     first value greater than
                                        use fixed order compare(lhs value, rhs
                                        element)
        equal range                     <lower_bound, upper_bound>
                                        you can use equal range, compare 1st and
                                        2nd to check if item found.
                                        you can also use lower_bound:
                                            auto iter = lower_bound(..)
                                            if(iter != end() && !(value < iter)

transform   you can transform yourself if you want

filling: 8
    fill[_n]                    operator=,   init n item with the same value,
    uninitialized_fill[_n]      copy constructor, similar to placement new, init
                                n item with the same value
    generate[_n]                use unary functor to init
    iota[_n]                    ++ init

minmax: 6
    min[_element]
    max[_element]
    minmax[_element]
    c++11 add new overload to min and max for location list
    max always return a if a and b are equivalent, use minmax if that's that
    what you want.
    min and max use const T& as argument, and return const T&, which means, if
    you pass temporary object as argument, it's life time will be extend to the
    life time as cosnt T& argument, which will end when the function returned,
    be very very careful about this.

sort: 7
    sort                        quick sort
    is_sorted                   
    stable_sort                 keep relative order of equivalent item
    partial_sort[_copy]
    is_sorted_until
    nth_element                 sort into less_than_nth + nth + greater than nth

    you can sort a subrange of a collection by using a combination of
    nth_element and partial-sort

    boost::spread_sort          combine radix and quick sort

partition: 5
    partition[_copy]            return partition point: end of elemnts that pass
                                predicate. The copy versoin use two output iter
                                to seperate true and false items.
    stable_partition            keep relative order
    is_partitioned
    partition_point             get partition point of partitioned

    gather:
         stable_partition on 0 to n with negated predicate, stable_partition on
         n to last with predicate

    boost::is_partitioned_until

accumulate
inner_product
adjacent_difference
partial_sum

reorder: 7
    next_permutation            will cycle if meet end
    prev_premutatoin
    is_premutation
    rotate[_copy]               can be used to do slide
    reverse
    shuffle

moving range: 6
    copy[_n|_backward]              first output iter must not in the range of source
    move[_backward]                 move style copy, first output iter must not in range of source
    swap_range                      overlap not allowed

heap: 3
    push_heap                   pop up newly pushed elemnets
    pop_heap                    swap front and end, pop down end, must follow by a pop_back
    sort_heap                   n times pop_heap without pop_back

remove:
    std::remove                 note that the values of elements left at the end
                                of the range are unspecified

mismatch
lexicographical_compare
equal

any_of
all_of
none_of
