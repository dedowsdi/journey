------------------------------------------------------------
git

#output to stdout
git --no-pager subcommands

------------------------------------------------------------
ignore:

.git/info/exclude  local ignore
------------------------------------------------------------
diff 

git diff                changed but not yet staged
git diff--stage         staged but not commited 
git difftool            view diffs in software
git diff '@^' file      compare parent of head, limit to file
git diff 'sha^' 'sha' file      compare specific commit and it's parent, limit to file
------------------------------------------------------------
rm

git rm -f         // If you modified the file and added it to the index already, you must force the removal with the-f option
git rm --cached   //keep the file in your working tree but remove it from your staging area.
git rm log/\*.log //removes all files that have the .log extension in the log/ directory
git rm \*~        //removes all files that end with ~
------------------------------------------------------------
log

git log -p      // shows the difference introduced in each commit.
git log -2      //limits the output to only the last two entries
git log --stat  // see  abbreviated stats for each commit
git log --graph --oneline --all // or tig --all or gitk --all
git log master..branchname    // show changes of 'branchname' which is created from master
git log master..              // .................current buranch .......................
------------------------------------------------------------
show

git show commit  // show commit content
------------------------------------------------------------
commit 

git commit --amend   Takes your staging area and uses it for the previous commit (change last commit)
                     If no new staging area, change message only.

                     Save the file with blank contents will abort the amend.


To change specific commit a0b0c0:
    method 1.
        git rebase --interactive 'a0b0c0^'
        modify pick to edit in the 'a0b0c0' line, save and exit, git will rewind back to when 'a0b0c0' is first committed
        amend it like you amend the top commit. (if you just want to change message, change pick to reword, and skip following steps)
        git commit --all --amend --no-edit
        git rebase --continue

    method 2.
        create a new commit that fix a0b0c0 (assume it's name is xxxxx) :
        git rebase --interactive 'a0b0c0^'
        move xxxxxx right below a0b0c0(the oldest one is on top)
        modify pick to squash in the xxxxxx line, save and exit.
        You will be presented with an editor to merge commit messages, do so, save, exit.

    Note that if there are conflicts between your amend and the later commits, you need to merge them.

------------------------------------------------------------
remote

git remote       lists the shortnames of each remote handle you¡¯ve specified. 
git remote -v     shows you the URLs that Git has stored for the shortname to be used 
git remote add pb https://github.com/paulboone/ticgit  add a new remote Git
                                                       repository as a shortname
git remote rename pb paul   rename remote shortname
git remote show origin                  //see more information about a particular remote, 
git remote rm paul                      //remove a remote 
git push origin--tags                   //push tags
git checkout -b version2 tagname        //checkout tag  
------------------------------------------------------------
checkout

git checkout .                  discard all changes
git checkout singlefile         discard changes to singlefile
git checkout [commit] singlefile         get commit version of target file
------------------------------------------------------------
push --force                    force push, even current head behind remote
                                head, this swill delete commits, be careful
------------------------------------------------------------
branch

git branch -d hotfix                            delete branch
git push origin --delete serverfix              remove remote branch
git branch -v                                   see the last commit on each branch
git branch -vv                                  see the last commit on each branch and it's tracking remote branch
git branch --merged                             see which branches are already merged into the branch your are on
git branch --no-merged                          to see all the branches that contain work you haven¡¯t yet merged in
git branch-d                                    remove branch
git push origin:serverfix serverfix             push branch to remote
git checkout -b serverfix origin/serverfix      create your own serverfix branch
git checkout --track origin/serverfix           the same as above

When you have a tracking branch set up, you can reference it with the
@{upstream} or @{u} shorthand.  So if you¡¯re on the master branch and it's
tracking origin/master, you can say something like git merge @{u} instead of git
merge origin/master if you wish
------------------------------------------------------------
reset

git reset HEAD ...                              cancel staged changes (before commiting)
get reset --hard ...                            remove commits
------------------------------------------------------------
revert

git revert HEAD                                 cancel last commit with new commit
------------------------------------------------------------
git clean
git clean -fd                    remove unstaged files and directories
git clean -fd -n                 print, don't remove
------------------------------------------------------------
dotfiles
git clone url --bare .dotfiles
git --git-dir=.dotfiles --work-dir=.
git config --global alias.dotfiles = '!git --git-dir=$HOME/.dotfiles --work-tree=$HOME'
git dotfiles config --local status.showUntrackedFiles no
------------------------------------------------------------
clone
git clone --depth 1 url         shallow copy
git fetch --depth               fetch later
git fetch --unshallow           fetch later

------------------------------------------------------------
ssh
add public ssh key to user/settigns/SSH and GPG keys
git remote set-url origin git+ssh://git@github.com/...
------------------------------------------------------------
global ignore
git config global core.excludefile ~/.gitignore
------------------------------------------------------------
merge
git mergetool
4 files will be opend : LOCAL, BASE, REMOTE, MERGED
use `:diffget RE` to obtain change from remote
git save original file as "*.orig" by default, if you don't want that:
    git config --global mergetool.keepBackup false
------------------------------------------------------------
sync fork
git remote add upstream remote_address
git fetch remote
git checkout master
git merge upstream/master
git push
------------------------------------------------------------
search deleted file:
git rev-list -n 1 HEAD -- '*/filename'
git log --all --full-history -- '*/filename'
------------------------------------------------------------
submodule

submodule is a pointer to a specific commit

add submodule
    git submodule add https://...       // this cmd change .gitmodule, clone submodule
    git commit -am 'add submodule ...'

clone repo with submodule
    git clone ... && git submodule init && git submodule update
    or
    git clone --recurse-submodules ...

remove a submodule
    # Remove the submodule entry from .git/config
    git submodule deinit -f path/to/submodule

    # Remove the submodule directory from the superproject's .git/modules directory
    rm -rf .git/modules/path/to/submodule

    # Remove the entry in .gitmodules and remove the submodule directory located at path/to/submodule
    git rm -f path/to/submodule

update submodule to a new commit
    go to submodule, pull changes
    got parent, commit change ?????, add -A first ????? You also need to remind your friend to call git submodule update ????

change a submodule
    after you commit and push changes to submodule, you need to also commit a change for parent repo.

To avoid submodule issue
    run `git submodule update` after every `git pull`
------------------------------------------------------------
4 types of git objects:
    commit : contains the directory tree object hash, parent commit hash, author, committer, date and message.
    tree   : contains sub trees and blobs (file)
    blob   : snap shot of file
    tag    : contains the hash of the tagged object, the type of tagged object (usually a commit), the tag name, author, date and message:
------------------------------------------------------------
git cat-file -p sha     get contents of files associated with this sha
git ls-tree tree_sha    get blob sha of this tree (the same as git cat-file -p tree_sha ?)
------------------------------------------------------------
rebase

rebase -i @~2       reorder last 2 commit interactively.

rebase --skip       skip current branch commit, use upstream commit.

------------------------------------------------------------
filter-branch

    # remove garbage or unwanted file permantly
    git filter-branch --tree-filter 'rm -rf vendor/gems' HEAD
    # Note that above command  also delete local files. Add -f you need to do it multiple times.

    # push to github
    git push origin master --force
------------------------------------------------------------
blame
    # find out which commit changed 1-3 lines of a file
    git blame -L1,3 f

------------------------------------------------------------
upload image to github
    got wiki, edit a new page. clone url, clone wiki repo to local, add image, push back.


