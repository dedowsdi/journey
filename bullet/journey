CCD is short for Continuous Collision Detection, which is a workaround for a
common problem in game physics:
    a fast moving body might not collide with an obstacle if in one frame it is
    "before" the obstacle, and in the next one it is already "behind" the obstacle.
    At no frame the fast moving body overlaps with the obstacle, and thus no
    response is created. This is what CCD is for. CCD checks for collisions in
    between frames, and thus can prevent fast moving objects from passing through
    thin obstacles.

    We have to set up the swept sphere only on the fast moving dynamic bodies.
    There is no need to do anything for the static or slow moving obstacles.  One
    particular use for CCD is firing a bullet.

hinge:
    z axes of btTransForm as hinge axis in local space
    btHingeConstraint::setLimit(Scaler lowLimit, Scaler HighLimit);

twistcone:
    x axes of btTransForm as twist axis in local space, just like forearm
    btConeTwistConstraint::setLimit(Scaler zAxesRotAbsLimit, Scaler yAxesRotAbsLimit, Scaler xAxesRotAbsLimit)
    xAxesRotAbsLimit: rotate angle absolute limit alonge x axes

    btGeneric6DofConstraint(btRigidBody& rbB, const btTransform& frameInB, bool useLinearReferenceFrameB);
    frameInB is in local space


terrain image in bullet is upsize down with ogre,

    need change

    btHeightfieldTerrainShape::getVertex

    btScalar height = getRawHeightFieldValue(x, y);
    to
    btScalar height = getRawHeightFieldValue(x, m_heightStickLength - y - 1);

activation state (see btDiscreteDynamicsWorld::updateActivationState):
    normal collision object starts with ACTIVE_TAG.
    Kinematic object starts with DISABLE_DEACTIVATION.
    RigidBody wants to sleep if it's linear velocity and angular velocity is smaller than threshold for gDeactivationTime seconds or it's activation state is ISLAND_SLEEPING or WANTS_DEACTIVATION
    Static or kinematic object sleep as ISLAND_SLEEPING if they want to sleep
    Dynamic rigid body set angulaer and linear velocity to 0 if it want to sleep and their activation state is ISLAND_SLEEPING.
    Dynamic rigid body change it's activation state to WANTS_DEACTIVATION if it wants to sleep and it's activation state is ACTIVE_TAG
    An collision object is active if it's state is not ISLAND_SLEEPING and DISABLE_DEACTIVATION
    Static rigid body use ISLAND_SLEEPING when it's added to dynamic world.

If you want two object to collide:
    maskOfA & groupOfB && maskOfB & groupOfA must be true

btVector3 and btTransform default construct doesn't init them self to proper value, be careful.
