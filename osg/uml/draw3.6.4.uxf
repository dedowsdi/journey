<?xml version="1.0" encoding="UTF-8"?><diagram program="umlet" version="13.3">
  <zoom_level>9</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>459</x>
      <y>567</y>
      <w>252</w>
      <h>90</h>
    </coordinates>
    <panel_attributes>Geometry
--
drawImplemention()
drawVertexArraysImplemention()
drawPrimitiveImplemention()
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>729</x>
      <y>18</y>
      <w>252</w>
      <h>117</h>
    </coordinates>
    <panel_attributes>State
--
resetVertexAttributeAlias()
convertVertexShaderToOsgBuiltIns()
--
_useVertexAttributeAliasing
_useModelViewAndProjectionUniform</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1107</x>
      <y>90</y>
      <w>207</w>
      <h>90</h>
    </coordinates>
    <panel_attributes>AttributeDispatchers
--
void activateNormalArray(array);
void activateVertexAttribArray(index, array)
dispatch(primitive_index)
--
_activeDispatchList</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>729</x>
      <y>171</y>
      <w>225</w>
      <h>108</h>
    </coordinates>
    <panel_attributes>VertexArrayState
--
assignAllDispatchers()
bindVertexBufferobject(vbo)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>828</x>
      <y>126</y>
      <w>27</w>
      <h>63</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;50.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>972</x>
      <y>45</y>
      <w>153</w>
      <h>81</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;150.0;70.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1089</x>
      <y>252</y>
      <w>189</w>
      <h>27</h>
    </coordinates>
    <panel_attributes>AttributeDipatcherMap</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1161</x>
      <y>171</y>
      <w>27</w>
      <h>99</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;90.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1071</x>
      <y>360</y>
      <w>216</w>
      <h>63</h>
    </coordinates>
    <panel_attributes>AttributeDispatch
--
void assign(array)
void operator(uint pos)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1161</x>
      <y>270</y>
      <w>27</w>
      <h>108</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;100.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>855</x>
      <y>513</y>
      <w>216</w>
      <h>27</h>
    </coordinates>
    <panel_attributes>TemplateAttributeDispatch</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1116</x>
      <y>513</y>
      <w>234</w>
      <h>27</h>
    </coordinates>
    <panel_attributes>TemplateTargetAttributeDispatch</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>954</x>
      <y>414</y>
      <w>207</w>
      <h>117</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>210.0;10.0;10.0;110.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1161</x>
      <y>414</y>
      <w>72</w>
      <h>117</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;60.0;110.0</additional_attributes>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>0</x>
      <y>0</y>
      <w>459</w>
      <h>342</h>
    </coordinates>
    <panel_attributes>AttributeDispatchers is used to dispatch generic vertex attribute
to opengl. If OSG_GL_VERTEX_ARRAY_FUNC_AVAIABLE is defined (by default) and vertex attribute aliasing is not used, it use glColor3f family command, otherwise it use glVertexAttrib family command.

It's mainly used for OVERALL binding and PER_PRIMITIVE_SET binding,
if an array binding is OVERALL, it's dispatched immediately
during activation.
If an array binding is PER_PRIMITIVE_SET, it's added to
_activeDispatchList to be dispatched later per primitive set at
Geometry::drawPrimitiveImplemention().

It uses function object AttributeDispatch and it's derived class
TemplateAttributeDispatch (for glColor3f) and TemplateTargetAttributeDispatch (for glVertexAttrib)
to dispatch the array data to opengl eventually.

AttributeDispatchMap stores AttributeDispatch for all kinds of
needed arrayType. AttributeDispatchers build maps for 
normal,color, secondary color, fog color and a vector of extra
vertex attribute .at init, and looks for the related dispatch
by arrayType for each kind of array through these maps.







bg=blue
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>603</x>
      <y>315</y>
      <w>405</w>
      <h>108</h>
    </coordinates>
    <panel_attributes>ArrayDispatch
--
/enable_and_dispatch(state, array)/
/enable_and_dispatch(state, array, buffer)/
/enable_and_dispatch(state, size, type, stride, ptr, normalized)/
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>9</x>
      <y>351</y>
      <w>423</w>
      <h>288</h>
    </coordinates>
    <panel_attributes>VertexArrayState handles PER_VERTEX binding. 

If OSG_GL_VERTEX_ARRAY_FUNCS_AVAILABLE is defined (by 
default) and vertex attribute aliasing is not used,
it use ColorArrayDispatch family class to call old
gl*pointer to setup vertex array.

Otherwise it use VertexAttribArrayDispatch to enable
vertex attrib array and setup attrib pointer.

They are setup at VertexArrayState::assignAllDispatchers()

If you use VertexAttribArrayDispatch, it's location is
retrieved from _ColorAlias in osg::State, it's setup in 
State::resetVertexAttributeAlias.

Vim use compact aliasing by default, it conflicits with
fixed function pipeline, you can change it by calling
State::resetVertexAttributeAlias(false).

bg=blue</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>801</x>
      <y>270</y>
      <w>27</w>
      <h>63</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;50.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>468</x>
      <y>468</y>
      <w>162</w>
      <h>27</h>
    </coordinates>
    <panel_attributes>VertexArrayDispatch</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>549</x>
      <y>414</y>
      <w>225</w>
      <h>72</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>230.0;10.0;10.0;60.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>639</x>
      <y>468</y>
      <w>162</w>
      <h>27</h>
    </coordinates>
    <panel_attributes>NormalArrayDispatch</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>684</x>
      <y>414</y>
      <w>108</w>
      <h>72</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>100.0;10.0;10.0;60.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>810</x>
      <y>468</y>
      <w>171</w>
      <h>27</h>
    </coordinates>
    <panel_attributes>VertexAttribArrayDispatch</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>801</x>
      <y>414</y>
      <w>99</w>
      <h>72</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;90.0;60.0</additional_attributes>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>0</x>
      <y>648</y>
      <w>342</w>
      <h>288</h>
    </coordinates>
    <panel_attributes>At last if osg use old gl*Pointer, you must use:

	0 vertex
	2 normal
	3 colors
	4 second color
	5 fog color
	8-15 text coords

Otherwise, you must use:

	0 vertex
	1 normal
	2 colors
	3-10 text coords
	11 second color
	12 fog color
	
bg=blue</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>513</x>
      <y>45</y>
      <w>135</w>
      <h>72</h>
    </coordinates>
    <panel_attributes>VertexAttribAlias
--
_location
_glName
_osgName</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>639</x>
      <y>54</y>
      <w>108</w>
      <h>45</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>100.0;10.0;10.0;30.0</additional_attributes>
  </element>
</diagram>
