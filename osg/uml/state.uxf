<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.2">
  <zoom_level>8</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>856</x>
      <y>88</y>
      <w>272</w>
      <h>392</h>
    </coordinates>
    <panel_attributes>State
--
apply()
apply(stateset)
insertStateSet(position, stateset)
removeStateSet(stateset)
applyMode(mode, value, modeStack)
applyModeMap(modeMap)
applyAttributeMap(attributeMap)
applyAttributeList(attributeMap, attributeList)
pushStateSet(dstate)
popStateSet()
pushModeList(modeMap, modeList)
popModeList(modeMap, modeList)
pushAttributeList(attributeMap, attributeList)
popAttributeList(attributeMap, attributeList)
setModeValidity(mode, valid)
initializeExtensionProcs()
initupModeDefineMaps()
reset()
--
_stateStateStack
_modeMap
_attributeMap
_uniformMap
_defineMap</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>912</x>
      <y>520</y>
      <w>120</w>
      <h>136</h>
    </coordinates>
    <panel_attributes>StateSet
--
getModeList()
getAttributeList()
setGlobalDefaults()
--
_renderingHint
_binMode
_binNum</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>992</x>
      <y>472</y>
      <w>24</w>
      <h>64</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;60.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>488</x>
      <y>368</y>
      <w>144</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>ModeStack
--
valid
changed
last_applied_value
global_default_value</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>512</x>
      <y>464</y>
      <w>120</w>
      <h>24</h>
    </coordinates>
    <panel_attributes>AttributeStack</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>0</x>
      <y>696</y>
      <w>368</w>
      <h>360</h>
    </coordinates>
    <panel_attributes>CullVisitor tracks the current StateGraph node, When it finds a 
StateSet in a node, it checks to see if the StateSet object
matches any state graph node that is a child of the current
state graph. If it does, then that state graph node becomes the 
current state graph; otherwise, a new StateGraph child of the
current state graph is created and becomes the current state 
graph. After the traversal of the current scene graph node and 
its children has finished, the current state graph reverts back
to the parent, or former state graph. In this way the state 
graph mimics the relationship of StateSet objects in the scene
graph. An important result is that a StateSet object found in
different nodes in the scene graph will be associated with a 
single StateGraph node, as long as the chain of "parent" 
StateSet objects is the same for each use.

CullVisitor also tracks the current render bin, as specified 
in StateSet objects, on as stack during its scene graph 
traversal. When the traversal reaches the geometry at the 
leaves of the scene graph, the current state graph node and
render bin are directly used to construct a RenderLeaf that 
will hold the geometry and its state graph, put the leaf in a
state graph node if necessary, and then put the leaf on the
appropriate list of the current render bin. After the 
CullVisitor object's work is finished, the resulting 
collection of render bins are ready to be rendered.


bg=blue</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>720</x>
      <y>400</y>
      <w>80</w>
      <h>24</h>
    </coordinates>
    <panel_attributes>ModeMap</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>680</x>
      <y>464</y>
      <w>120</w>
      <h>24</h>
    </coordinates>
    <panel_attributes>AttributeMap</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>624</x>
      <y>464</y>
      <w>72</w>
      <h>24</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;70.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>792</x>
      <y>336</y>
      <w>80</w>
      <h>88</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>80.0;10.0;10.0;90.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>792</x>
      <y>400</y>
      <w>80</w>
      <h>88</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>80.0;10.0;10.0;90.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>952</x>
      <y>744</y>
      <w>256</w>
      <h>144</h>
    </coordinates>
    <panel_attributes>RenderBin
--
draw(renderInfo, previous:RenderLeaf)
drawImplemention(renderInof, previous)
find_or_insert(binNum, binName)
--
_binNum
_parent
_sortMode
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>600</x>
      <y>832</y>
      <w>184</w>
      <h>128</h>
    </coordinates>
    <panel_attributes>RenderLeaf
--
render(renderInfo, previous)
--
_drawable
_projection
_modelview</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>592</x>
      <y>648</y>
      <w>248</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>StateGraph
--
moveStateGraph(state, sgCur, sgNew)
find_or_inosrt(stateset)
numToTop()
--
_stateSet
_parent</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>728</x>
      <y>624</y>
      <w>184</w>
      <h>56</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
graph</panel_attributes>
    <additional_attributes>140.0;50.0;170.0;50.0;170.0;10.0;10.0;10.0;10.0;30.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>672</x>
      <y>760</y>
      <w>24</w>
      <h>88</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;90.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>832</x>
      <y>704</y>
      <w>136</w>
      <h>72</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>150.0;70.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>672</x>
      <y>752</y>
      <w>296</w>
      <h>96</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>350.0;10.0;10.0;100.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1200</x>
      <y>768</y>
      <w>112</w>
      <h>88</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
graph</panel_attributes>
    <additional_attributes>10.0;90.0;80.0;90.0;80.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1048</x>
      <y>472</y>
      <w>24</w>
      <h>288</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;340.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1184</x>
      <y>568</y>
      <w>384</w>
      <h>112</h>
    </coordinates>
    <panel_attributes>CullVisitor
--
addDrawableAndDepth(drawable, modelView, depth)
pushStateSet(ss)
popStateSet()</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>808</x>
      <y>528</y>
      <w>120</w>
      <h>72</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;70.0;130.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>0</x>
      <y>0</y>
      <w>368</w>
      <h>224</h>
    </coordinates>
    <panel_attributes>Osg build inner stacks for StateSet, and each mode.
modestackes are stored in modemap, 

Every time osg push a StateSet into stack, osg will get a
modelist of this stateset, and loop every mode in this list,
push it's value into it's mode stack if it's not overrideen by 
parent stateset, and set chagne property of this mode stack to
true.

Then if you call State::apply, osg loop every modestack in 
modemap, call opengl routines only if it's changed. Apply is
this only place where osg finally change opengl state based
on current stacks.

Attribute, uniform and defines works in the same theory as
mode.


bg=blue</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>0</x>
      <y>224</y>
      <w>368</w>
      <h>288</h>
    </coordinates>
    <panel_attributes>
RenderBin draw in following sequence:
	child RenderBin whose _binNum &lt; 0 
	fine grained render leaves.(transparent)
	coarse grained render leaves in all it's state graphs.
	child RenderBin whose _binNum &gt;= 0
	
There are mainly 2 kinds of render bin: opaque and transparent

The opaque bin contains only StateGraph objects, with their 
associated RenderLeaf objects. Its bin number is 0. 

The transparent bin holds RenderLeaf objects on its 
"fine grain" list of leaves which will be sorted back-to-front 
before the scene is rendered. Its bin number is 10, so it
will be renderedafter the opaque geometry. 

Transparent bin also has it's own stateset which is used to
implement alpha blending, this stateset will be inserted
into the statestack of state temporarily during draw.

bg=blue</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>832</x>
      <y>648</y>
      <w>152</w>
      <h>64</h>
    </coordinates>
    <panel_attributes>lt=-&gt;&gt;&gt;&gt;</panel_attributes>
    <additional_attributes>170.0;10.0;10.0;60.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>952</x>
      <y>944</y>
      <w>256</w>
      <h>128</h>
    </coordinates>
    <panel_attributes>RenderStage
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>0</x>
      <y>512</y>
      <w>368</w>
      <h>184</h>
    </coordinates>
    <panel_attributes>StateGraph represent a node in the StateSet tree, follow the
tree from root to no will setup opengl state to render
leaves  that use this graph, which means it also represent a
specific opengl state.

Note that current graph doesn't equal to current opengl state,
unless you call State::apply().

During render of RenderLeaf, osg move state graph to parent
graph of current graph, then call apply(StateSet) with 
StateSet of current graph, which means if the last StateSet is
not empty, it will be pushed into stack, applyed(), then poped
out of stark.


bg=blue</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>832</x>
      <y>632</y>
      <w>368</w>
      <h>88</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>440.0;10.0;10.0;90.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1072</x>
      <y>648</y>
      <w>128</w>
      <h>112</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>140.0;10.0;10.0;120.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1080</x>
      <y>880</y>
      <w>24</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;80.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1200</x>
      <y>672</y>
      <w>208</w>
      <h>360</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>240.0;10.0;10.0;430.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>624</x>
      <y>400</y>
      <w>112</w>
      <h>24</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;120.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>632</x>
      <y>520</y>
      <w>184</w>
      <h>88</h>
    </coordinates>
    <panel_attributes>StateAttribute
--
getTypeMemberPair()
getMember()
apply()
getModeUsage()</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>384</x>
      <y>0</y>
      <w>440</w>
      <h>72</h>
    </coordinates>
    <panel_attributes>Some mode has associated attribute, e.g. light, tex_gen.
If you turn on mode without set up attribute, you get
attribute set by other stateset, be very careful about
this.
bg=blue</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>384</x>
      <y>120</y>
      <w>440</w>
      <h>144</h>
    </coordinates>
    <panel_attributes>Some attributes are transform related, they are called position
attribute, some position attribute has a coresponding node:
  LightSource : light
  ClipNode : clip plane
  TexGenNode : tex gen

Note that position attribute are global!!!!!.
RenderStage::drawImplemention apply them before drwing anything.

bg=blue</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>0</x>
      <y>1056</y>
      <w>496</w>
      <h>168</h>
    </coordinates>
    <panel_attributes>There are sevral inital mode values in State::_modeMap

GL_POINT_SPRITE_ARB : setup by setModeValidity in initizlizeExtensionProcs
GL_SCISSOR_TEST : setup by applyMode in RenderStage::drawImplemention

bg=blue</panel_attributes>
    <additional_attributes/>
  </element>
</diagram>
